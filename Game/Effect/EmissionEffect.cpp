#include "EmissionEffect.h"

EmissionEffect::EmissionEffect() {
	Init();
}

EmissionEffect::~EmissionEffect() {
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　初期化
//////////////////////////////////////////////////////////////////////////////////////////////////

void EmissionEffect::Init() {
	particleModel_ = ModelLoader::GetInstacne()->GetModel("particle");
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　更新関数
//////////////////////////////////////////////////////////////////////////////////////////////////

void EmissionEffect::Update() {
	particleList_.remove_if([](const Particle& particle) {
		if (particle.GetIsDead()) {
			return true;
		}
		return false;
	});

	for (std::list<Particle>::iterator it = particleList_.begin(); it != particleList_.end();++it) {
		it->Update();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　描画関数
//////////////////////////////////////////////////////////////////////////////////////////////////

void EmissionEffect::Draw(const ViewProjection& viewProjection) {
	for (std::list<Particle>::iterator it = particleList_.begin(); it != particleList_.end(); ++it) {
		it->Draw(viewProjection);
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// メンバ関数
//////////////////////////////////////////////////////////////////////////////////////////////////

void EmissionEffect::AddParticleList(const Vector3& origine, const uint32_t& lifeTime, const uint32_t& count) {
	for (uint32_t oi = 0; oi < count; oi++) {
		Vector3 velocity = Normalize(RandomVector3(-1, 1));
		Particle particle{ particleModel_, origine, velocity, lifeTime };
		particleList_.push_back(std::move(particle));
	}
}
