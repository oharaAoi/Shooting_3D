#include "MobEnemy.h"

MobEnemy::MobEnemy(std::vector<Model*> models) {
	enemyId_ = mobEnemyNum;
	mobEnemyNum++;
	Collider::SetTypeID(static_cast<uint32_t>(CollisionTypeIdDef::kEnemy));
	Init(models);
}
MobEnemy::~MobEnemy() {}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　初期化処理
//////////////////////////////////////////////////////////////////////////////////////////////////

void MobEnemy::Init(std::vector<Model*> models) {
	BaseEnemy::Init(models);

	worldTransforms_[EnmeyParts::Enmey_Body].parent_ = &worldTransform_;

	worldTransform_.translation_ = { 2.0f, 1.0f, 40.0f };
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　更新処理
//////////////////////////////////////////////////////////////////////////////////////////////////

void MobEnemy::Update() {
	BaseEnemy::Update();

	// ImGuiの編集
	EditImGui();
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　描画処理
//////////////////////////////////////////////////////////////////////////////////////////////////

void MobEnemy::Draw(const ViewProjection& viewProjection) const {
	BaseEnemy::Draw(viewProjection);
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　Playerの行動関連
//////////////////////////////////////////////////////////////////////////////////////////////////

// ------------------- 移動させる関数 ------------------- //

void MobEnemy::Move() {
}

// ------------------- 当たり判定を取った時の関数 ------------------- //

void MobEnemy::OnCollision(Collider* other) {
	uint32_t typeID = other->GetTypeID();
	if (typeID == static_cast<uint32_t>(CollisionTypeIdDef::kEnemy)) {

	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　ImGui
//////////////////////////////////////////////////////////////////////////////////////////////////

void MobEnemy::EditImGui() {
#ifdef _DEBUG
	ImGui::Begin("MobEnemy");
	std::string label = "Enemy " + std::to_string(enemyId_);
	if (ImGui::TreeNode(label.c_str())) {
		ImGui::DragFloat3("translate", &worldTransform_.translation_.x, 0.1f);
		ImGui::DragFloat3("rotate", &worldTransform_.rotation_.x, 0.1f);
		ImGui::TreePop();
	}
	ImGui::End();
#endif // _DEBUG
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　accessor
//////////////////////////////////////////////////////////////////////////////////////////////////

// ------------------- world空間での座標を取得する ------------------- //

Vector3 MobEnemy::GetWorldPosition() const {
	// ローカル座標でのオフセット
	const Vector3 offset = { 0.0f, 0.0f, 0.0f };
	// ワールド座標に変換
	Vector3 worldPos = Transform(offset, worldTransform_.matWorld_);

	return worldPos;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　accessor
//////////////////////////////////////////////////////////////////////////////////////////////////
