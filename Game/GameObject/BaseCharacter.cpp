#include "BaseCharacter.h"

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　初期化処理
//////////////////////////////////////////////////////////////////////////////////////////////////

void BaseCharacter::Init(std::vector<Model*> models) {
	models_ = models;

	worldTransform_.Initialize();

	// モデルのコンテナからキーを取得しそれに応じたtransformを作成
	for (uint32_t oi = 0; oi < models_.size(); oi++) {
		worldTransforms_.emplace_back(std::move(WorldTransform{}));
		worldTransforms_[oi].Initialize();
	}

	//Collider::Inti();
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　更新処理
//////////////////////////////////////////////////////////////////////////////////////////////////

void BaseCharacter::Update() {
	worldTransform_.UpdateMatrix();
	for (uint32_t oi = 0; oi < models_.size(); oi++) {
		worldTransforms_[oi].UpdateMatrix();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////
// ↓　描画処理
//////////////////////////////////////////////////////////////////////////////////////////////////

void BaseCharacter::Draw(const ViewProjection& viewProjection) const {
	for (uint32_t oi = 0; oi < models_.size(); oi++) {
		models_[oi]->Draw(worldTransforms_[oi], viewProjection);
	}
}

/// <summary>
/// 移動の関数
/// </summary>
void BaseCharacter::Move() {
}
